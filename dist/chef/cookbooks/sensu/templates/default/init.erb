#!/bin/bash

# chkconfig: 345 90 90
# description: Sensu <%= @service %> service script

# Source function library.
. /etc/init.d/functions

[ -f /etc/profile.d/ruby-enterprise.sh ] && . /etc/profile.d/ruby-enterprise.sh

prog="sensu-<%= @service %>"

[ -f /etc/sysconfig/$prog ] && . /etc/sysconfig/$prog

user=${SENSU_USER-<%= node.sensu.user %>}
config=${CONFIG-<%= node.sensu.directory %>/config.json}
exec=${EXEC-<%= node.sensu.bin_path %>/sensu-<%= @service %>}
logfile=${LOGFILE-<%= node.sensu.log.directory %>/$prog.log}
pidfile=${PIDFILE-/var/run/sensu/$prog.pid}
lockfile=${LOCKFILE-/var/lock/subsys/$prog}
options=${OPTIONS}

ensure_pid_dir () {
    pid_dir=`dirname ${pidfile}`
    if [ ! -d ${pid_dir} ] ; then
        mkdir -p ${pid_dir}
        chown -R ${user} ${pid_dir}
        chmod 755 ${pid_dir}
    fi
}

start() {
    echo -n $"Starting $prog: "

    [ -x $exec ] || exit 5

    status &> /dev/null

    if [ $? -eq 0 ]; then
        failure "$prog is running."
        echo
        exit 1
    fi

    ensure_pid_dir
    daemon --user $user --pidfile $pidfile \
        "$exec -b -c $config -p $pidfile -l $logfile $options"
    RETVAL=$?
    sleep 1

    # make sure it's still running. some errors occur only after startup
    status &> /dev/null
    if [ $? -ne 0 ]; then
        echo_failure
        exit 1
    fi

    if [ $RETVAL -eq 0 ]; then
        touch $lockfile
    fi
    echo
    return $RETVAL
}

stop() {
    echo -n $"Stopping $prog: "

    if [ -f $pidfile ]; then
        killproc -p $pidfile $prog
        RETVAL=$?
        if [ $RETVAL -eq 0 ]; then
            rm -f $pidfile
            rm -f $lockfile
            success $STRING
        else
            failure $STRING
        fi
        echo
        return $RETVAL
    else
        pid=$(pgrep -fl $exec | grep -v grep | grep -v bash | cut -f1 -d" ")
        if [ ! "$pid" == "" ]; then
            kill $pid
            RETVAL=$?
            if [ $RETVAL -eq 0 ]; then
                rm -f $pidfile
                rm -f $lockfile
                success $STRING
            fi
        else
            failure $STRING
        fi
        echo
    fi
}

status() {
    local pid

    # First try "ps"
    pid=$(pgrep -fl $exec | grep -v grep | grep -v bash | cut -f1 -d" ")
    if [ -n "$pid" ]; then
            echo $"${prog} (pid $pid) is running..."
                return 0
                fi

    # Next try "/var/run/*.pid" files
    if [ -f /var/run/${prog}.pid ] ; then
            read pid < /var/run/${prog}.pid
                if [ -n "$pid" ]; then
                            echo $"${prog} dead but pid file exists"
        return 1
    fi
fi

# See if /var/lock/subsys/${prog} exists
    if [ -f /var/lock/subsys/${prog} ]; then
        echo $"${prog} dead but subsys locked"
return 2
fi

echo $"${prog} is stopped"
return 3
}

case "$1" in
  start)
        start
        ;;
  stop)
        stop
        ;;
  status)
        status
        ;;
  restart)
        stop
        start
        ;;
  *)
        echo "Usage: $0 {start|stop|status|restart}"
exit 2
esac

exit $?
