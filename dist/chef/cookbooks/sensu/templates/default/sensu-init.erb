#!/bin/bash
#
# Sensu Startup script
 
# chkconfig: 345 90 90
# description: Sensu Startup Script

# Source function library.
. /etc/init.d/functions

exec="<%= GemBinPath.path(@service) %>/sensu-<%= @service %>"
prog="sensu-<%= @service %>"

[ -f /etc/sysconfig/$prog ] && . /etc/sysconfig/$prog
 
user=${SENSU_USER-<%= node.sensu.user %>}
pidfile=${PIDFILE-/var/run/sensu-<%= @service %>.pid}
config=${CONFIG-/etc/sensu/config.json}
lockfile=${LOCKFILE-/var/lock/subsys/$prog}
group=${SENSU_GROUP-sensu}
options=${OPTIONS-<% if @options %> <%= @options %><% end %>}

start() {
    STRING=$"Starting $prog: "
    echo -n $STRING

    [ -x $exec ] || exit 5
    [ -f $config ] || exit 6

    if [ -d $lockfile ] ; then
      if [ "$(pidof -o %PPID -x $prog | wc -l)" -gt 1 ]; then
        failure "$prog is running."
        exit 1
      else
        warning "$prog is dead, but $lockfile exists"
        rm -rf $lockfile
      fi
    fi

    daemon --user "$user" $prog -c "$config" "$options" "&>/dev/null & disown" &
    RETVAL=$?
    sleep 1

    if [ $RETVAL -eq 0 ]; then
        touch $lockfile
        pid=`pidof -s -x $prog`
        echo $pid > $pidfile
        success $STRING
    else
        failure $STRING
    fi
    echo
    return $RETVAL
}

stop() {
    STRING=$"Stopping $prog: "
    echo -n $STRING

    if [ -f $pidfile ]; then
        killproc -p $pidfile $prog
        RETVAL=$?
        if [ $RETVAL -eq 0 ]; then
            rm -f $pidfile
            rm -f $lockfile
            success $STRING
        else
            failure $STRING
        fi
        echo
        return $RETVAL
    else
        pid="$(pidof -o %PPID -x $prog)"
        if [ -z "${pid}" ]; then
            success $STRING
        else
            kill $pid
            RETVAL=$?
            if [ $RETVAL -eq 0 ]; then
                rm -f $pidfile
                rm -f $lockfile
                success $STRING
            fi
        fi
    fi
}

status() {
    if [ -f $pidfile ]; then
        status=0
        for pid in $(cat $pidfile)
        do
            [ -d /proc/${pid} ] && status=$pid; break
        done
        if [ "$status" = "0" ]; then
            echo "$prog is not running."
        else
            echo "$prog (${pid}) is running."
        fi
    else
        pid="$(pidof -o %PPID -x $prog)"
        if [ -z "${pid}" ]; then
            echo "$prog is not running."
        else
            echo "$prog (${pid}) is running."
        fi
    fi
}

case "$1" in
  start)
	start
        ;;
  stop)
        stop
        ;;
  status)
	status
	;;
  restart)
        stop
        sleep 10
        start
        ;;
  *)
        echo "Usage: $0 {start|stop|restart}"
	exit 2
esac
 
exit $?
